Question Return the root node of a binary search tree that matches the given preorder traversal.
(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)
It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Solution â€“ 
def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        
        def bstconstruction(high = float("inf")):
            
            if not (preorder and preorder[0] < high):
                return None
            val = preorder.pop(0)
            root = TreeNode(val)
            root.left = bstconstruction(val)
            root.right = bstconstruction(high)
            return root
        return bstconstruction()
