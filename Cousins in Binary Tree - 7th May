Question - In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.
Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.
Return true if and only if the nodes corresponding to the values x and y are cousins.

Solution-  where i denotes depth of node

def isCousins(self, root: TreeNode, x: int, y: int):
        
        stats = {}
        def traverse(root,i=0,parent = None):
            if root:
                if root.val in (x,y): 
                    stats[root.val] = (i,parent)
                traverse(root.left,i+1,root.val)
                traverse(root.right,i+1,root.val)
            
        
        traverse(root)
        return stats[x][0] == stats[y][0] and stats[x][1] != stats[y][1]
